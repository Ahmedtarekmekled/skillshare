/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/base64id";
exports.ids = ["vendor-chunks/base64id"];
exports.modules = {

/***/ "(rsc)/./node_modules/base64id/lib/base64id.js":
/*!***********************************************!*\
  !*** ./node_modules/base64id/lib/base64id.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/*!\n * base64id v0.1.0\n */ /**\n * Module dependencies\n */ var crypto = __webpack_require__(/*! crypto */ \"crypto\");\n/**\n * Constructor\n */ var Base64Id = function() {};\n/**\n * Get random bytes\n *\n * Uses a buffer if available, falls back to crypto.randomBytes\n */ Base64Id.prototype.getRandomBytes = function(bytes) {\n    var BUFFER_SIZE = 4096;\n    var self = this;\n    bytes = bytes || 12;\n    if (bytes > BUFFER_SIZE) {\n        return crypto.randomBytes(bytes);\n    }\n    var bytesInBuffer = parseInt(BUFFER_SIZE / bytes);\n    var threshold = parseInt(bytesInBuffer * 0.85);\n    if (!threshold) {\n        return crypto.randomBytes(bytes);\n    }\n    if (this.bytesBufferIndex == null) {\n        this.bytesBufferIndex = -1;\n    }\n    if (this.bytesBufferIndex == bytesInBuffer) {\n        this.bytesBuffer = null;\n        this.bytesBufferIndex = -1;\n    }\n    // No buffered bytes available or index above threshold\n    if (this.bytesBufferIndex == -1 || this.bytesBufferIndex > threshold) {\n        if (!this.isGeneratingBytes) {\n            this.isGeneratingBytes = true;\n            crypto.randomBytes(BUFFER_SIZE, function(err, bytes) {\n                self.bytesBuffer = bytes;\n                self.bytesBufferIndex = 0;\n                self.isGeneratingBytes = false;\n            });\n        }\n        // Fall back to sync call when no buffered bytes are available\n        if (this.bytesBufferIndex == -1) {\n            return crypto.randomBytes(bytes);\n        }\n    }\n    var result = this.bytesBuffer.slice(bytes * this.bytesBufferIndex, bytes * (this.bytesBufferIndex + 1));\n    this.bytesBufferIndex++;\n    return result;\n};\n/**\n * Generates a base64 id\n *\n * (Original version from socket.io <http://socket.io>)\n */ Base64Id.prototype.generateId = function() {\n    var rand = Buffer.alloc(15); // multiple of 3 for base64\n    if (!rand.writeInt32BE) {\n        return Math.abs(Math.random() * Math.random() * Date.now() | 0).toString() + Math.abs(Math.random() * Math.random() * Date.now() | 0).toString();\n    }\n    this.sequenceNumber = this.sequenceNumber + 1 | 0;\n    rand.writeInt32BE(this.sequenceNumber, 11);\n    if (crypto.randomBytes) {\n        this.getRandomBytes(12).copy(rand);\n    } else {\n        // not secure for node 0.4\n        [\n            0,\n            4,\n            8\n        ].forEach(function(i) {\n            rand.writeInt32BE(Math.random() * Math.pow(2, 32) | 0, i);\n        });\n    }\n    return rand.toString(\"base64\").replace(/\\//g, \"_\").replace(/\\+/g, \"-\");\n};\n/**\n * Export\n */ exports = module.exports = new Base64Id();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmFzZTY0aWQvbGliL2Jhc2U2NGlkLmpzIiwibWFwcGluZ3MiOiJBQUFBOztDQUVDLEdBRUQ7O0NBRUMsR0FFRCxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUVyQjs7Q0FFQyxHQUVELElBQUlDLFdBQVcsWUFBYTtBQUU1Qjs7OztDQUlDLEdBRURBLFNBQVNDLFNBQVMsQ0FBQ0MsY0FBYyxHQUFHLFNBQVNDLEtBQUs7SUFFaEQsSUFBSUMsY0FBYztJQUNsQixJQUFJQyxPQUFPLElBQUk7SUFFZkYsUUFBUUEsU0FBUztJQUVqQixJQUFJQSxRQUFRQyxhQUFhO1FBQ3ZCLE9BQU9OLE9BQU9RLFdBQVcsQ0FBQ0g7SUFDNUI7SUFFQSxJQUFJSSxnQkFBZ0JDLFNBQVNKLGNBQVlEO0lBQ3pDLElBQUlNLFlBQVlELFNBQVNELGdCQUFjO0lBRXZDLElBQUksQ0FBQ0UsV0FBVztRQUNkLE9BQU9YLE9BQU9RLFdBQVcsQ0FBQ0g7SUFDNUI7SUFFQSxJQUFJLElBQUksQ0FBQ08sZ0JBQWdCLElBQUksTUFBTTtRQUNoQyxJQUFJLENBQUNBLGdCQUFnQixHQUFHLENBQUM7SUFDNUI7SUFFQSxJQUFJLElBQUksQ0FBQ0EsZ0JBQWdCLElBQUlILGVBQWU7UUFDMUMsSUFBSSxDQUFDSSxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDRCxnQkFBZ0IsR0FBRyxDQUFDO0lBQzNCO0lBRUEsdURBQXVEO0lBQ3ZELElBQUksSUFBSSxDQUFDQSxnQkFBZ0IsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDQSxnQkFBZ0IsR0FBR0QsV0FBVztRQUVwRSxJQUFJLENBQUMsSUFBSSxDQUFDRyxpQkFBaUIsRUFBRTtZQUMzQixJQUFJLENBQUNBLGlCQUFpQixHQUFHO1lBQ3pCZCxPQUFPUSxXQUFXLENBQUNGLGFBQWEsU0FBU1MsR0FBRyxFQUFFVixLQUFLO2dCQUNqREUsS0FBS00sV0FBVyxHQUFHUjtnQkFDbkJFLEtBQUtLLGdCQUFnQixHQUFHO2dCQUN4QkwsS0FBS08saUJBQWlCLEdBQUc7WUFDM0I7UUFDRjtRQUVBLDhEQUE4RDtRQUM5RCxJQUFJLElBQUksQ0FBQ0YsZ0JBQWdCLElBQUksQ0FBQyxHQUFHO1lBQy9CLE9BQU9aLE9BQU9RLFdBQVcsQ0FBQ0g7UUFDNUI7SUFDRjtJQUVBLElBQUlXLFNBQVMsSUFBSSxDQUFDSCxXQUFXLENBQUNJLEtBQUssQ0FBQ1osUUFBTSxJQUFJLENBQUNPLGdCQUFnQixFQUFFUCxRQUFPLEtBQUksQ0FBQ08sZ0JBQWdCLEdBQUM7SUFDOUYsSUFBSSxDQUFDQSxnQkFBZ0I7SUFFckIsT0FBT0k7QUFDVDtBQUVBOzs7O0NBSUMsR0FFRGQsU0FBU0MsU0FBUyxDQUFDZSxVQUFVLEdBQUc7SUFDOUIsSUFBSUMsT0FBT0MsT0FBT0MsS0FBSyxDQUFDLEtBQUssMkJBQTJCO0lBQ3hELElBQUksQ0FBQ0YsS0FBS0csWUFBWSxFQUFFO1FBQ3RCLE9BQU9DLEtBQUtDLEdBQUcsQ0FBQ0QsS0FBS0UsTUFBTSxLQUFLRixLQUFLRSxNQUFNLEtBQUtDLEtBQUtDLEdBQUcsS0FBSyxHQUFHQyxRQUFRLEtBQ3BFTCxLQUFLQyxHQUFHLENBQUNELEtBQUtFLE1BQU0sS0FBS0YsS0FBS0UsTUFBTSxLQUFLQyxLQUFLQyxHQUFHLEtBQUssR0FBR0MsUUFBUTtJQUN2RTtJQUNBLElBQUksQ0FBQ0MsY0FBYyxHQUFHLElBQUssQ0FBQ0EsY0FBYyxHQUFHLElBQUs7SUFDbERWLEtBQUtHLFlBQVksQ0FBQyxJQUFJLENBQUNPLGNBQWMsRUFBRTtJQUN2QyxJQUFJN0IsT0FBT1EsV0FBVyxFQUFFO1FBQ3RCLElBQUksQ0FBQ0osY0FBYyxDQUFDLElBQUkwQixJQUFJLENBQUNYO0lBQy9CLE9BQU87UUFDTCwwQkFBMEI7UUFDMUI7WUFBQztZQUFHO1lBQUc7U0FBRSxDQUFDWSxPQUFPLENBQUMsU0FBU0MsQ0FBQztZQUMxQmIsS0FBS0csWUFBWSxDQUFDQyxLQUFLRSxNQUFNLEtBQUtGLEtBQUtVLEdBQUcsQ0FBQyxHQUFHLE1BQU0sR0FBR0Q7UUFDekQ7SUFDRjtJQUNBLE9BQU9iLEtBQUtTLFFBQVEsQ0FBQyxVQUFVTSxPQUFPLENBQUMsT0FBTyxLQUFLQSxPQUFPLENBQUMsT0FBTztBQUNwRTtBQUVBOztDQUVDLEdBRURDLFVBQVVDLE9BQU9ELE9BQU8sR0FBRyxJQUFJakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9za2lsbHNoYXJlLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NGlkL2xpYi9iYXNlNjRpZC5qcz9iM2YwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogYmFzZTY0aWQgdjAuMS4wXG4gKi9cblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzXG4gKi9cblxudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yXG4gKi9cblxudmFyIEJhc2U2NElkID0gZnVuY3Rpb24oKSB7IH07XG5cbi8qKlxuICogR2V0IHJhbmRvbSBieXRlc1xuICpcbiAqIFVzZXMgYSBidWZmZXIgaWYgYXZhaWxhYmxlLCBmYWxscyBiYWNrIHRvIGNyeXB0by5yYW5kb21CeXRlc1xuICovXG5cbkJhc2U2NElkLnByb3RvdHlwZS5nZXRSYW5kb21CeXRlcyA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG5cbiAgdmFyIEJVRkZFUl9TSVpFID0gNDA5NlxuICB2YXIgc2VsZiA9IHRoaXM7ICBcbiAgXG4gIGJ5dGVzID0gYnl0ZXMgfHwgMTI7XG5cbiAgaWYgKGJ5dGVzID4gQlVGRkVSX1NJWkUpIHtcbiAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKGJ5dGVzKTtcbiAgfVxuICBcbiAgdmFyIGJ5dGVzSW5CdWZmZXIgPSBwYXJzZUludChCVUZGRVJfU0laRS9ieXRlcyk7XG4gIHZhciB0aHJlc2hvbGQgPSBwYXJzZUludChieXRlc0luQnVmZmVyKjAuODUpO1xuXG4gIGlmICghdGhyZXNob2xkKSB7XG4gICAgcmV0dXJuIGNyeXB0by5yYW5kb21CeXRlcyhieXRlcyk7XG4gIH1cblxuICBpZiAodGhpcy5ieXRlc0J1ZmZlckluZGV4ID09IG51bGwpIHtcbiAgICAgdGhpcy5ieXRlc0J1ZmZlckluZGV4ID0gLTE7XG4gIH1cblxuICBpZiAodGhpcy5ieXRlc0J1ZmZlckluZGV4ID09IGJ5dGVzSW5CdWZmZXIpIHtcbiAgICB0aGlzLmJ5dGVzQnVmZmVyID0gbnVsbDtcbiAgICB0aGlzLmJ5dGVzQnVmZmVySW5kZXggPSAtMTtcbiAgfVxuXG4gIC8vIE5vIGJ1ZmZlcmVkIGJ5dGVzIGF2YWlsYWJsZSBvciBpbmRleCBhYm92ZSB0aHJlc2hvbGRcbiAgaWYgKHRoaXMuYnl0ZXNCdWZmZXJJbmRleCA9PSAtMSB8fCB0aGlzLmJ5dGVzQnVmZmVySW5kZXggPiB0aHJlc2hvbGQpIHtcbiAgICAgXG4gICAgaWYgKCF0aGlzLmlzR2VuZXJhdGluZ0J5dGVzKSB7XG4gICAgICB0aGlzLmlzR2VuZXJhdGluZ0J5dGVzID0gdHJ1ZTtcbiAgICAgIGNyeXB0by5yYW5kb21CeXRlcyhCVUZGRVJfU0laRSwgZnVuY3Rpb24oZXJyLCBieXRlcykge1xuICAgICAgICBzZWxmLmJ5dGVzQnVmZmVyID0gYnl0ZXM7XG4gICAgICAgIHNlbGYuYnl0ZXNCdWZmZXJJbmRleCA9IDA7XG4gICAgICAgIHNlbGYuaXNHZW5lcmF0aW5nQnl0ZXMgPSBmYWxzZTtcbiAgICAgIH0pOyBcbiAgICB9XG4gICAgXG4gICAgLy8gRmFsbCBiYWNrIHRvIHN5bmMgY2FsbCB3aGVuIG5vIGJ1ZmZlcmVkIGJ5dGVzIGFyZSBhdmFpbGFibGVcbiAgICBpZiAodGhpcy5ieXRlc0J1ZmZlckluZGV4ID09IC0xKSB7XG4gICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKGJ5dGVzKTtcbiAgICB9XG4gIH1cbiAgXG4gIHZhciByZXN1bHQgPSB0aGlzLmJ5dGVzQnVmZmVyLnNsaWNlKGJ5dGVzKnRoaXMuYnl0ZXNCdWZmZXJJbmRleCwgYnl0ZXMqKHRoaXMuYnl0ZXNCdWZmZXJJbmRleCsxKSk7IFxuICB0aGlzLmJ5dGVzQnVmZmVySW5kZXgrKzsgXG4gIFxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIGJhc2U2NCBpZFxuICpcbiAqIChPcmlnaW5hbCB2ZXJzaW9uIGZyb20gc29ja2V0LmlvIDxodHRwOi8vc29ja2V0LmlvPilcbiAqL1xuXG5CYXNlNjRJZC5wcm90b3R5cGUuZ2VuZXJhdGVJZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJhbmQgPSBCdWZmZXIuYWxsb2MoMTUpOyAvLyBtdWx0aXBsZSBvZiAzIGZvciBiYXNlNjRcbiAgaWYgKCFyYW5kLndyaXRlSW50MzJCRSkge1xuICAgIHJldHVybiBNYXRoLmFicyhNYXRoLnJhbmRvbSgpICogTWF0aC5yYW5kb20oKSAqIERhdGUubm93KCkgfCAwKS50b1N0cmluZygpXG4gICAgICArIE1hdGguYWJzKE1hdGgucmFuZG9tKCkgKiBNYXRoLnJhbmRvbSgpICogRGF0ZS5ub3coKSB8IDApLnRvU3RyaW5nKCk7XG4gIH1cbiAgdGhpcy5zZXF1ZW5jZU51bWJlciA9ICh0aGlzLnNlcXVlbmNlTnVtYmVyICsgMSkgfCAwO1xuICByYW5kLndyaXRlSW50MzJCRSh0aGlzLnNlcXVlbmNlTnVtYmVyLCAxMSk7XG4gIGlmIChjcnlwdG8ucmFuZG9tQnl0ZXMpIHtcbiAgICB0aGlzLmdldFJhbmRvbUJ5dGVzKDEyKS5jb3B5KHJhbmQpO1xuICB9IGVsc2Uge1xuICAgIC8vIG5vdCBzZWN1cmUgZm9yIG5vZGUgMC40XG4gICAgWzAsIDQsIDhdLmZvckVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgcmFuZC53cml0ZUludDMyQkUoTWF0aC5yYW5kb20oKSAqIE1hdGgucG93KDIsIDMyKSB8IDAsIGkpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiByYW5kLnRvU3RyaW5nKCdiYXNlNjQnKS5yZXBsYWNlKC9cXC8vZywgJ18nKS5yZXBsYWNlKC9cXCsvZywgJy0nKTtcbn07XG5cbi8qKlxuICogRXhwb3J0XG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gbmV3IEJhc2U2NElkKCk7XG4iXSwibmFtZXMiOlsiY3J5cHRvIiwicmVxdWlyZSIsIkJhc2U2NElkIiwicHJvdG90eXBlIiwiZ2V0UmFuZG9tQnl0ZXMiLCJieXRlcyIsIkJVRkZFUl9TSVpFIiwic2VsZiIsInJhbmRvbUJ5dGVzIiwiYnl0ZXNJbkJ1ZmZlciIsInBhcnNlSW50IiwidGhyZXNob2xkIiwiYnl0ZXNCdWZmZXJJbmRleCIsImJ5dGVzQnVmZmVyIiwiaXNHZW5lcmF0aW5nQnl0ZXMiLCJlcnIiLCJyZXN1bHQiLCJzbGljZSIsImdlbmVyYXRlSWQiLCJyYW5kIiwiQnVmZmVyIiwiYWxsb2MiLCJ3cml0ZUludDMyQkUiLCJNYXRoIiwiYWJzIiwicmFuZG9tIiwiRGF0ZSIsIm5vdyIsInRvU3RyaW5nIiwic2VxdWVuY2VOdW1iZXIiLCJjb3B5IiwiZm9yRWFjaCIsImkiLCJwb3ciLCJyZXBsYWNlIiwiZXhwb3J0cyIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/base64id/lib/base64id.js\n");

/***/ })

};
;