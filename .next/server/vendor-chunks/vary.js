"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/vary";
exports.ids = ["vendor-chunks/vary"];
exports.modules = {

/***/ "(rsc)/./node_modules/vary/index.js":
/*!************************************!*\
  !*** ./node_modules/vary/index.js ***!
  \************************************/
/***/ ((module) => {

eval("/*!\n * vary\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module exports.\n */ module.exports = vary;\nmodule.exports.append = append;\n/**\n * RegExp to match field-name in RFC 7230 sec 3.2\n *\n * field-name    = token\n * token         = 1*tchar\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n *               / DIGIT / ALPHA\n *               ; any VCHAR, except delimiters\n */ var FIELD_NAME_REGEXP = /^[!#$%&'*+\\-.^_`|~0-9A-Za-z]+$/;\n/**\n * Append a field to a vary header.\n *\n * @param {String} header\n * @param {String|Array} field\n * @return {String}\n * @public\n */ function append(header, field) {\n    if (typeof header !== \"string\") {\n        throw new TypeError(\"header argument is required\");\n    }\n    if (!field) {\n        throw new TypeError(\"field argument is required\");\n    }\n    // get fields array\n    var fields = !Array.isArray(field) ? parse(String(field)) : field;\n    // assert on invalid field names\n    for(var j = 0; j < fields.length; j++){\n        if (!FIELD_NAME_REGEXP.test(fields[j])) {\n            throw new TypeError(\"field argument contains an invalid header name\");\n        }\n    }\n    // existing, unspecified vary\n    if (header === \"*\") {\n        return header;\n    }\n    // enumerate current values\n    var val = header;\n    var vals = parse(header.toLowerCase());\n    // unspecified vary\n    if (fields.indexOf(\"*\") !== -1 || vals.indexOf(\"*\") !== -1) {\n        return \"*\";\n    }\n    for(var i = 0; i < fields.length; i++){\n        var fld = fields[i].toLowerCase();\n        // append value (case-preserving)\n        if (vals.indexOf(fld) === -1) {\n            vals.push(fld);\n            val = val ? val + \", \" + fields[i] : fields[i];\n        }\n    }\n    return val;\n}\n/**\n * Parse a vary header into an array.\n *\n * @param {String} header\n * @return {Array}\n * @private\n */ function parse(header) {\n    var end = 0;\n    var list = [];\n    var start = 0;\n    // gather tokens\n    for(var i = 0, len = header.length; i < len; i++){\n        switch(header.charCodeAt(i)){\n            case 0x20:\n                /*   */ if (start === end) {\n                    start = end = i + 1;\n                }\n                break;\n            case 0x2c:\n                /* , */ list.push(header.substring(start, end));\n                start = end = i + 1;\n                break;\n            default:\n                end = i + 1;\n                break;\n        }\n    }\n    // final token\n    list.push(header.substring(start, end));\n    return list;\n}\n/**\n * Mark that a request is varied on a header field.\n *\n * @param {Object} res\n * @param {String|Array} field\n * @public\n */ function vary(res, field) {\n    if (!res || !res.getHeader || !res.setHeader) {\n        // quack quack\n        throw new TypeError(\"res argument is required\");\n    }\n    // get existing header\n    var val = res.getHeader(\"Vary\") || \"\";\n    var header = Array.isArray(val) ? val.join(\", \") : String(val);\n    // set new header\n    if (val = append(header, field)) {\n        res.setHeader(\"Vary\", val);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNNLE9BQ3ZCQSxJQUFJZ0IsSUFBSSxDQUFDLFFBQ1RwQixPQUFPSTtJQUVYLGlCQUFpQjtJQUNqQixJQUFLQSxNQUFNYixPQUFPRSxRQUFRQyxRQUFTO1FBQ2pDdUIsSUFBSUUsU0FBUyxDQUFDLFFBQVFmO0lBQ3hCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9za2lsbHNoYXJlLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL3ZhcnkvaW5kZXguanM/ODYwMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIHZhcnlcbiAqIENvcHlyaWdodChjKSAyMDE0LTIwMTcgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gdmFyeVxubW9kdWxlLmV4cG9ydHMuYXBwZW5kID0gYXBwZW5kXG5cbi8qKlxuICogUmVnRXhwIHRvIG1hdGNoIGZpZWxkLW5hbWUgaW4gUkZDIDcyMzAgc2VjIDMuMlxuICpcbiAqIGZpZWxkLW5hbWUgICAgPSB0b2tlblxuICogdG9rZW4gICAgICAgICA9IDEqdGNoYXJcbiAqIHRjaGFyICAgICAgICAgPSBcIiFcIiAvIFwiI1wiIC8gXCIkXCIgLyBcIiVcIiAvIFwiJlwiIC8gXCInXCIgLyBcIipcIlxuICogICAgICAgICAgICAgICAvIFwiK1wiIC8gXCItXCIgLyBcIi5cIiAvIFwiXlwiIC8gXCJfXCIgLyBcImBcIiAvIFwifFwiIC8gXCJ+XCJcbiAqICAgICAgICAgICAgICAgLyBESUdJVCAvIEFMUEhBXG4gKiAgICAgICAgICAgICAgIDsgYW55IFZDSEFSLCBleGNlcHQgZGVsaW1pdGVyc1xuICovXG5cbnZhciBGSUVMRF9OQU1FX1JFR0VYUCA9IC9eWyEjJCUmJyorXFwtLl5fYHx+MC05QS1aYS16XSskL1xuXG4vKipcbiAqIEFwcGVuZCBhIGZpZWxkIHRvIGEgdmFyeSBoZWFkZXIuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlclxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGZpZWxkXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gYXBwZW5kIChoZWFkZXIsIGZpZWxkKSB7XG4gIGlmICh0eXBlb2YgaGVhZGVyICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2hlYWRlciBhcmd1bWVudCBpcyByZXF1aXJlZCcpXG4gIH1cblxuICBpZiAoIWZpZWxkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZmllbGQgYXJndW1lbnQgaXMgcmVxdWlyZWQnKVxuICB9XG5cbiAgLy8gZ2V0IGZpZWxkcyBhcnJheVxuICB2YXIgZmllbGRzID0gIUFycmF5LmlzQXJyYXkoZmllbGQpXG4gICAgPyBwYXJzZShTdHJpbmcoZmllbGQpKVxuICAgIDogZmllbGRcblxuICAvLyBhc3NlcnQgb24gaW52YWxpZCBmaWVsZCBuYW1lc1xuICBmb3IgKHZhciBqID0gMDsgaiA8IGZpZWxkcy5sZW5ndGg7IGorKykge1xuICAgIGlmICghRklFTERfTkFNRV9SRUdFWFAudGVzdChmaWVsZHNbal0pKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdmaWVsZCBhcmd1bWVudCBjb250YWlucyBhbiBpbnZhbGlkIGhlYWRlciBuYW1lJylcbiAgICB9XG4gIH1cblxuICAvLyBleGlzdGluZywgdW5zcGVjaWZpZWQgdmFyeVxuICBpZiAoaGVhZGVyID09PSAnKicpIHtcbiAgICByZXR1cm4gaGVhZGVyXG4gIH1cblxuICAvLyBlbnVtZXJhdGUgY3VycmVudCB2YWx1ZXNcbiAgdmFyIHZhbCA9IGhlYWRlclxuICB2YXIgdmFscyA9IHBhcnNlKGhlYWRlci50b0xvd2VyQ2FzZSgpKVxuXG4gIC8vIHVuc3BlY2lmaWVkIHZhcnlcbiAgaWYgKGZpZWxkcy5pbmRleE9mKCcqJykgIT09IC0xIHx8IHZhbHMuaW5kZXhPZignKicpICE9PSAtMSkge1xuICAgIHJldHVybiAnKidcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZmllbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGZsZCA9IGZpZWxkc1tpXS50b0xvd2VyQ2FzZSgpXG5cbiAgICAvLyBhcHBlbmQgdmFsdWUgKGNhc2UtcHJlc2VydmluZylcbiAgICBpZiAodmFscy5pbmRleE9mKGZsZCkgPT09IC0xKSB7XG4gICAgICB2YWxzLnB1c2goZmxkKVxuICAgICAgdmFsID0gdmFsXG4gICAgICAgID8gdmFsICsgJywgJyArIGZpZWxkc1tpXVxuICAgICAgICA6IGZpZWxkc1tpXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuLyoqXG4gKiBQYXJzZSBhIHZhcnkgaGVhZGVyIGludG8gYW4gYXJyYXkuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlclxuICogQHJldHVybiB7QXJyYXl9XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlIChoZWFkZXIpIHtcbiAgdmFyIGVuZCA9IDBcbiAgdmFyIGxpc3QgPSBbXVxuICB2YXIgc3RhcnQgPSAwXG5cbiAgLy8gZ2F0aGVyIHRva2Vuc1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gaGVhZGVyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgc3dpdGNoIChoZWFkZXIuY2hhckNvZGVBdChpKSkge1xuICAgICAgY2FzZSAweDIwOiAvKiAgICovXG4gICAgICAgIGlmIChzdGFydCA9PT0gZW5kKSB7XG4gICAgICAgICAgc3RhcnQgPSBlbmQgPSBpICsgMVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDB4MmM6IC8qICwgKi9cbiAgICAgICAgbGlzdC5wdXNoKGhlYWRlci5zdWJzdHJpbmcoc3RhcnQsIGVuZCkpXG4gICAgICAgIHN0YXJ0ID0gZW5kID0gaSArIDFcbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGVuZCA9IGkgKyAxXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgLy8gZmluYWwgdG9rZW5cbiAgbGlzdC5wdXNoKGhlYWRlci5zdWJzdHJpbmcoc3RhcnQsIGVuZCkpXG5cbiAgcmV0dXJuIGxpc3Rcbn1cblxuLyoqXG4gKiBNYXJrIHRoYXQgYSByZXF1ZXN0IGlzIHZhcmllZCBvbiBhIGhlYWRlciBmaWVsZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVzXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gZmllbGRcbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiB2YXJ5IChyZXMsIGZpZWxkKSB7XG4gIGlmICghcmVzIHx8ICFyZXMuZ2V0SGVhZGVyIHx8ICFyZXMuc2V0SGVhZGVyKSB7XG4gICAgLy8gcXVhY2sgcXVhY2tcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZXMgYXJndW1lbnQgaXMgcmVxdWlyZWQnKVxuICB9XG5cbiAgLy8gZ2V0IGV4aXN0aW5nIGhlYWRlclxuICB2YXIgdmFsID0gcmVzLmdldEhlYWRlcignVmFyeScpIHx8ICcnXG4gIHZhciBoZWFkZXIgPSBBcnJheS5pc0FycmF5KHZhbClcbiAgICA/IHZhbC5qb2luKCcsICcpXG4gICAgOiBTdHJpbmcodmFsKVxuXG4gIC8vIHNldCBuZXcgaGVhZGVyXG4gIGlmICgodmFsID0gYXBwZW5kKGhlYWRlciwgZmllbGQpKSkge1xuICAgIHJlcy5zZXRIZWFkZXIoJ1ZhcnknLCB2YWwpXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidmFyeSIsImFwcGVuZCIsIkZJRUxEX05BTUVfUkVHRVhQIiwiaGVhZGVyIiwiZmllbGQiLCJUeXBlRXJyb3IiLCJmaWVsZHMiLCJBcnJheSIsImlzQXJyYXkiLCJwYXJzZSIsIlN0cmluZyIsImoiLCJsZW5ndGgiLCJ0ZXN0IiwidmFsIiwidmFscyIsInRvTG93ZXJDYXNlIiwiaW5kZXhPZiIsImkiLCJmbGQiLCJwdXNoIiwiZW5kIiwibGlzdCIsInN0YXJ0IiwibGVuIiwiY2hhckNvZGVBdCIsInN1YnN0cmluZyIsInJlcyIsImdldEhlYWRlciIsInNldEhlYWRlciIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/vary/index.js\n");

/***/ })

};
;