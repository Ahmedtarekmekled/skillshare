"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@auth";
exports.ids = ["vendor-chunks/@auth"];
exports.modules = {

/***/ "(rsc)/./node_modules/@auth/mongodb-adapter/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@auth/mongodb-adapter/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MongoDBAdapter: () => (/* binding */ MongoDBAdapter),\n/* harmony export */   _id: () => (/* binding */ _id),\n/* harmony export */   defaultCollections: () => (/* binding */ defaultCollections),\n/* harmony export */   format: () => (/* binding */ format)\n/* harmony export */ });\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongodb */ \"mongodb\");\nvar __addDisposableResource = undefined && undefined.__addDisposableResource || function(env, value, async) {\n    if (value !== null && value !== void 0) {\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n        var dispose;\n        if (async) {\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n            dispose = value[Symbol.asyncDispose];\n        }\n        if (dispose === void 0) {\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n            dispose = value[Symbol.dispose];\n        }\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n        env.stack.push({\n            value: value,\n            dispose: dispose,\n            async: async\n        });\n    } else if (async) {\n        env.stack.push({\n            async: true\n        });\n    }\n    return value;\n};\nvar __disposeResources = undefined && undefined.__disposeResources || function(SuppressedError1) {\n    return function(env) {\n        function fail(e) {\n            env.error = env.hasError ? new SuppressedError1(e, env.error, \"An error was suppressed during disposal.\") : e;\n            env.hasError = true;\n        }\n        function next() {\n            while(env.stack.length){\n                var rec = env.stack.pop();\n                try {\n                    var result = rec.dispose && rec.dispose.call(rec.value);\n                    if (rec.async) return Promise.resolve(result).then(next, function(e) {\n                        fail(e);\n                        return next();\n                    });\n                } catch (e) {\n                    fail(e);\n                }\n            }\n            if (env.hasError) throw env.error;\n        }\n        return next();\n    };\n}(typeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n});\n/**\n * <div style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", padding: 16}}>\n *  <p>Official <a href=\"https://www.mongodb.com\">MongoDB</a> adapter for Auth.js / NextAuth.js.</p>\n *  <a href=\"https://www.mongodb.com\">\n *   <img style={{display: \"block\"}} src=\"https://authjs.dev/img/adapters/mongodb.svg\" width=\"30\" />\n *  </a>\n * </div>\n *\n * ## Installation\n *\n * ```bash npm2yarn\n * npm install @auth/mongodb-adapter mongodb\n * ```\n *\n * @module @auth/mongodb-adapter\n */ \n/**\n * This adapter uses https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-2.html#using-declarations-and-explicit-resource-management.\n * This feature is very new and requires runtime polyfills for `Symbol.asyncDispose` in order to work properly in all environments.\n * It is also required to set in the `tsconfig.json` file the compilation target to `es2022` or below and configure the `lib` option to include `esnext` or `esnext.disposable`.\n *\n * You can find more information about this feature and the polyfills in the link above.\n */ // @ts-expect-error read only property is not assignable\nSymbol.asyncDispose ?? (Symbol.asyncDispose = Symbol(\"Symbol.asyncDispose\"));\nconst defaultCollections = {\n    Users: \"users\",\n    Accounts: \"accounts\",\n    Sessions: \"sessions\",\n    VerificationTokens: \"verification_tokens\"\n};\nconst format = {\n    /** Takes a MongoDB object and returns a plain old JavaScript object */ from (object) {\n        const newObject = {};\n        for(const key in object){\n            const value = object[key];\n            if (key === \"_id\") {\n                newObject.id = value.toHexString();\n            } else if (key === \"userId\") {\n                newObject[key] = value.toHexString();\n            } else {\n                newObject[key] = value;\n            }\n        }\n        return newObject;\n    },\n    /** Takes a plain old JavaScript object and turns it into a MongoDB object */ to (object) {\n        const newObject = {\n            _id: _id(object.id)\n        };\n        for(const key in object){\n            const value = object[key];\n            if (key === \"userId\") newObject[key] = _id(value);\n            else if (key === \"id\") continue;\n            else newObject[key] = value;\n        }\n        return newObject;\n    }\n};\n/** @internal */ function _id(hex) {\n    if (hex?.length !== 24) return new mongodb__WEBPACK_IMPORTED_MODULE_0__.ObjectId();\n    return new mongodb__WEBPACK_IMPORTED_MODULE_0__.ObjectId(hex);\n}\nfunction MongoDBAdapter(/**\n * The MongoDB client.\n *\n * The MongoDB team recommends providing a non-connected `MongoClient` instance to avoid unhandled promise rejections if the client fails to connect.\n *\n * Alternatively, you can also pass:\n * - A promise that resolves to a connected `MongoClient` (not recommended).\n * - A function, to handle more complex and custom connection strategies.\n *\n * Using a function that returns `MongoClient | Promise<MongoClient>`, combined with `options.onClose`, can be useful when you want a more advanced and customized connection strategy to address challenges related to persistence, container reuse, and connection closure.\n */ client, options = {}) {\n    const { collections } = options;\n    const { from, to } = format;\n    const getDb = async ()=>{\n        const _client = await (typeof client === \"function\" ? client() : client);\n        const _db = _client.db(options.databaseName);\n        const c = {\n            ...defaultCollections,\n            ...collections\n        };\n        return {\n            U: _db.collection(c.Users),\n            A: _db.collection(c.Accounts),\n            S: _db.collection(c.Sessions),\n            V: _db.collection(c?.VerificationTokens),\n            [Symbol.asyncDispose]: async ()=>{\n                await options.onClose?.(_client);\n            }\n        };\n    };\n    return {\n        async createUser (data) {\n            const env_1 = {\n                stack: [],\n                error: void 0,\n                hasError: false\n            };\n            try {\n                const user = to(data);\n                const db = __addDisposableResource(env_1, await getDb(), true);\n                await db.U.insertOne(user);\n                return from(user);\n            } catch (e_1) {\n                env_1.error = e_1;\n                env_1.hasError = true;\n            } finally{\n                const result_1 = __disposeResources(env_1);\n                if (result_1) await result_1;\n            }\n        },\n        async getUser (id) {\n            const env_2 = {\n                stack: [],\n                error: void 0,\n                hasError: false\n            };\n            try {\n                const db = __addDisposableResource(env_2, await getDb(), true);\n                const user = await db.U.findOne({\n                    _id: _id(id)\n                });\n                if (!user) return null;\n                return from(user);\n            } catch (e_2) {\n                env_2.error = e_2;\n                env_2.hasError = true;\n            } finally{\n                const result_2 = __disposeResources(env_2);\n                if (result_2) await result_2;\n            }\n        },\n        async getUserByEmail (email) {\n            const env_3 = {\n                stack: [],\n                error: void 0,\n                hasError: false\n            };\n            try {\n                const db = __addDisposableResource(env_3, await getDb(), true);\n                const user = await db.U.findOne({\n                    email\n                });\n                if (!user) return null;\n                return from(user);\n            } catch (e_3) {\n                env_3.error = e_3;\n                env_3.hasError = true;\n            } finally{\n                const result_3 = __disposeResources(env_3);\n                if (result_3) await result_3;\n            }\n        },\n        async getUserByAccount (provider_providerAccountId) {\n            const env_4 = {\n                stack: [],\n                error: void 0,\n                hasError: false\n            };\n            try {\n                const db = __addDisposableResource(env_4, await getDb(), true);\n                const account = await db.A.findOne(provider_providerAccountId);\n                if (!account) return null;\n                const user = await db.U.findOne({\n                    _id: new mongodb__WEBPACK_IMPORTED_MODULE_0__.ObjectId(account.userId)\n                });\n                if (!user) return null;\n                return from(user);\n            } catch (e_4) {\n                env_4.error = e_4;\n                env_4.hasError = true;\n            } finally{\n                const result_4 = __disposeResources(env_4);\n                if (result_4) await result_4;\n            }\n        },\n        async updateUser (data) {\n            const env_5 = {\n                stack: [],\n                error: void 0,\n                hasError: false\n            };\n            try {\n                const { _id, ...user } = to(data);\n                const db = __addDisposableResource(env_5, await getDb(), true);\n                const result = await db.U.findOneAndUpdate({\n                    _id\n                }, {\n                    $set: user\n                }, {\n                    returnDocument: \"after\"\n                });\n                return from(result);\n            } catch (e_5) {\n                env_5.error = e_5;\n                env_5.hasError = true;\n            } finally{\n                const result_5 = __disposeResources(env_5);\n                if (result_5) await result_5;\n            }\n        },\n        async deleteUser (id) {\n            const env_6 = {\n                stack: [],\n                error: void 0,\n                hasError: false\n            };\n            try {\n                const userId = _id(id);\n                const db = __addDisposableResource(env_6, await getDb(), true);\n                await Promise.all([\n                    db.A.deleteMany({\n                        userId: userId\n                    }),\n                    db.S.deleteMany({\n                        userId: userId\n                    }),\n                    db.U.deleteOne({\n                        _id: userId\n                    })\n                ]);\n            } catch (e_6) {\n                env_6.error = e_6;\n                env_6.hasError = true;\n            } finally{\n                const result_6 = __disposeResources(env_6);\n                if (result_6) await result_6;\n            }\n        },\n        linkAccount: async (data)=>{\n            const env_7 = {\n                stack: [],\n                error: void 0,\n                hasError: false\n            };\n            try {\n                const account = to(data);\n                const db = __addDisposableResource(env_7, await getDb(), true);\n                await db.A.insertOne(account);\n                return account;\n            } catch (e_7) {\n                env_7.error = e_7;\n                env_7.hasError = true;\n            } finally{\n                const result_7 = __disposeResources(env_7);\n                if (result_7) await result_7;\n            }\n        },\n        async unlinkAccount (provider_providerAccountId) {\n            const env_8 = {\n                stack: [],\n                error: void 0,\n                hasError: false\n            };\n            try {\n                const db = __addDisposableResource(env_8, await getDb(), true);\n                const account = await db.A.findOneAndDelete(provider_providerAccountId);\n                return from(account);\n            } catch (e_8) {\n                env_8.error = e_8;\n                env_8.hasError = true;\n            } finally{\n                const result_8 = __disposeResources(env_8);\n                if (result_8) await result_8;\n            }\n        },\n        async getSessionAndUser (sessionToken) {\n            const env_9 = {\n                stack: [],\n                error: void 0,\n                hasError: false\n            };\n            try {\n                const db = __addDisposableResource(env_9, await getDb(), true);\n                const session = await db.S.findOne({\n                    sessionToken\n                });\n                if (!session) return null;\n                const user = await db.U.findOne({\n                    _id: new mongodb__WEBPACK_IMPORTED_MODULE_0__.ObjectId(session.userId)\n                });\n                if (!user) return null;\n                return {\n                    user: from(user),\n                    session: from(session)\n                };\n            } catch (e_9) {\n                env_9.error = e_9;\n                env_9.hasError = true;\n            } finally{\n                const result_9 = __disposeResources(env_9);\n                if (result_9) await result_9;\n            }\n        },\n        async createSession (data) {\n            const env_10 = {\n                stack: [],\n                error: void 0,\n                hasError: false\n            };\n            try {\n                const session = to(data);\n                const db = __addDisposableResource(env_10, await getDb(), true);\n                await db.S.insertOne(session);\n                return from(session);\n            } catch (e_10) {\n                env_10.error = e_10;\n                env_10.hasError = true;\n            } finally{\n                const result_10 = __disposeResources(env_10);\n                if (result_10) await result_10;\n            }\n        },\n        async updateSession (data) {\n            const env_11 = {\n                stack: [],\n                error: void 0,\n                hasError: false\n            };\n            try {\n                const { _id, ...session } = to(data);\n                const db = __addDisposableResource(env_11, await getDb(), true);\n                const updatedSession = await db.S.findOneAndUpdate({\n                    sessionToken: session.sessionToken\n                }, {\n                    $set: session\n                }, {\n                    returnDocument: \"after\"\n                });\n                return from(updatedSession);\n            } catch (e_11) {\n                env_11.error = e_11;\n                env_11.hasError = true;\n            } finally{\n                const result_11 = __disposeResources(env_11);\n                if (result_11) await result_11;\n            }\n        },\n        async deleteSession (sessionToken) {\n            const env_12 = {\n                stack: [],\n                error: void 0,\n                hasError: false\n            };\n            try {\n                const db = __addDisposableResource(env_12, await getDb(), true);\n                const session = await db.S.findOneAndDelete({\n                    sessionToken\n                });\n                return from(session);\n            } catch (e_12) {\n                env_12.error = e_12;\n                env_12.hasError = true;\n            } finally{\n                const result_12 = __disposeResources(env_12);\n                if (result_12) await result_12;\n            }\n        },\n        async createVerificationToken (data) {\n            const env_13 = {\n                stack: [],\n                error: void 0,\n                hasError: false\n            };\n            try {\n                const db = __addDisposableResource(env_13, await getDb(), true);\n                await db.V.insertOne(to(data));\n                return data;\n            } catch (e_13) {\n                env_13.error = e_13;\n                env_13.hasError = true;\n            } finally{\n                const result_13 = __disposeResources(env_13);\n                if (result_13) await result_13;\n            }\n        },\n        async useVerificationToken (identifier_token) {\n            const env_14 = {\n                stack: [],\n                error: void 0,\n                hasError: false\n            };\n            try {\n                const db = __addDisposableResource(env_14, await getDb(), true);\n                const verificationToken = await db.V.findOneAndDelete(identifier_token);\n                if (!verificationToken) return null;\n                const { _id, ...rest } = verificationToken;\n                return rest;\n            } catch (e_14) {\n                env_14.error = e_14;\n                env_14.hasError = true;\n            } finally{\n                const result_14 = __disposeResources(env_14);\n                if (result_14) await result_14;\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@auth/mongodb-adapter/index.js\n");

/***/ })

};
;